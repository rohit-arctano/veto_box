// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TestPublisherApp.cxx
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#include "TestPublisherApp.hpp"

#include <condition_variable>
#include <csignal>
#include <stdexcept>
#include <thread>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/log/StdoutConsumer.hpp>
#include <fastdds/dds/publisher/DataWriter.hpp>
#include <fastdds/dds/publisher/Publisher.hpp>
#include <fastdds/dds/publisher/qos/DataWriterQos.hpp>
#include <fastdds/dds/publisher/qos/PublisherQos.hpp>
#include <fastdds/rtps/common/Locator.hpp>
#include <fastdds/rtps/transport/UDPv4TransportDescriptor.hpp>
#include "TestPubSubTypes.hpp"

using namespace eprosima::fastdds::dds;

TestPublisherApp::TestPublisherApp(
    const int &domain_id)
    : factory_(nullptr), participant_(nullptr), publisher_(nullptr), topic_(nullptr), writer_(nullptr), type_(new TestPubSubType()), matched_(0), samples_sent_(0), stop_(false)
{
    std::string local_ip = "192.168.1.100";
    std::cout << "[CONFIG] Using Ethernet IP: " << local_ip << std::endl;

    // Create participant with specific QoS
    DomainParticipantQos pqos;
    pqos.name("Test_pub_participant");
    std::cout << "[CONFIG] Participant name set to: " << pqos.name() << std::endl;

    pqos.name("Test_pub_participant");
    factory_ = DomainParticipantFactory::get_shared_instance();
    participant_ = factory_->create_participant(domain_id, pqos, nullptr, StatusMask::none());
    if (participant_ == nullptr)
    {
        throw std::runtime_error("Test Participant initialization failed");
    }
    std::cout << "Participant created successfully!" << std::endl;

    // Configure UDP transport
    std::cout << "[TRANSPORT] Creating UDPv4 transport descriptor..." << std::endl;
    auto udp_transport = std::make_shared<eprosima::fastdds::rtps::UDPv4TransportDescriptor>();

    // Set buffer sizes
    udp_transport->sendBufferSize = 9216;
    udp_transport->receiveBufferSize = 9216;
    udp_transport->non_blocking_send = true;
    std::cout << "[TRANSPORT] Buffer sizes configured:\n"
              << "  - Send: " << udp_transport->sendBufferSize << " bytes\n"
              << "  - Recv: " << udp_transport->receiveBufferSize << " bytes\n"
              << "  - MaxMsg: " << udp_transport->maxMessageSize << " bytes" << std::endl;

    std::cout << "[TRANSPORT] Non-blocking sends: "
              << (udp_transport->non_blocking_send ? "ENABLED" : "DISABLED") << std::endl;

    udp_transport->interface_allowlist.push_back(local_ip);
    std::cout << "[TRANSPORT] Interface allowlist: " << local_ip << std::endl;

    pqos.transport().user_transports.push_back(udp_transport);
    pqos.transport().use_builtin_transports = false;
    std::cout << "[TRANSPORT] Custom transport configured, builtin transports disabled" << std::endl;

    // Configure discovery
    std::cout << "[DISCOVERY] Configuring metatraffic locators..." << std::endl;
    pqos.wire_protocol().builtin.metatrafficUnicastLocatorList.clear();
    eprosima::fastdds::rtps::Locator_t meta_locator;
    meta_locator.kind = LOCATOR_KIND_UDPv4;
    eprosima::fastdds::rtps::IPLocator::setIPv4(meta_locator, local_ip);
    meta_locator.port = 7400;
    pqos.wire_protocol().builtin.metatrafficUnicastLocatorList.push_back(meta_locator);
    pqos.wire_protocol().builtin.metatrafficMulticastLocatorList.clear();

    std::cout << "[DISCOVERY] Unicast locator configured:\n"
              << "  - IP: " << local_ip << "\n"
              << "  - Port: " << meta_locator.port << "\n"
              << "  - Multicast: DISABLED" << std::endl;

    // Create participant
    std::cout << "[FACTORY] Getting DomainParticipantFactory instance..." << std::endl;

    std::cout << "[SUCCESS] Participant created successfully!\n"
              << "  - GUID: " << participant_->guid() << "\n"
              << "  - Domain: 0" << std::endl;
              pqos.transport().user_transports.push_back(udp_transport);

    type_.register_type(participant_);

    // Create the publisher
    PublisherQos pub_qos = PUBLISHER_QOS_DEFAULT;
    participant_->get_default_publisher_qos(pub_qos);
    publisher_ = participant_->create_publisher(pub_qos, nullptr, StatusMask::none());
    if (publisher_ == nullptr)
    {
        throw std::runtime_error("Test Publisher initialization failed");
    }

    // Create the topic
    TopicQos topic_qos = TOPIC_QOS_DEFAULT;
    participant_->get_default_topic_qos(topic_qos);
    topic_ = participant_->create_topic("TestTopic", type_.get_type_name(), topic_qos);
    if (topic_ == nullptr)
    {
        throw std::runtime_error("Test Topic initialization failed");
    }

    // Create the data writer
    DataWriterQos writer_qos = DATAWRITER_QOS_DEFAULT;
    publisher_->get_default_datawriter_qos(writer_qos);
    writer_qos.reliability().kind = ReliabilityQosPolicyKind::RELIABLE_RELIABILITY_QOS;
    writer_qos.durability().kind = DurabilityQosPolicyKind::TRANSIENT_LOCAL_DURABILITY_QOS;
    writer_qos.history().kind = HistoryQosPolicyKind::KEEP_ALL_HISTORY_QOS;
    writer_ = publisher_->create_datawriter(topic_, writer_qos, this, StatusMask::all());
    if (writer_ == nullptr)
    {
        throw std::runtime_error("Test DataWriter initialization failed");
    }

    // Additional debug output for transport verification
    EPROSIMA_LOG_INFO(RTPS_PARTICIPANT, "Participant created with custom transport");
    for (const auto &transport : pqos.transport().user_transports)
    {
        EPROSIMA_LOG_INFO(RTPS_PARTICIPANT,
                          "Transport type: " << transport->get_type_name());
    }
}

TestPublisherApp::~TestPublisherApp()
{
    if (nullptr != participant_)
    {
        // Delete DDS entities contained within the DomainParticipant
        participant_->delete_contained_entities();

        // Delete DomainParticipant
        factory_->delete_participant(participant_);
    }
}

void TestPublisherApp::on_publication_matched(
    DataWriter * /*writer*/,
    const PublicationMatchedStatus &info)
{
    if (info.current_count_change == 1)
    {
        {
            std::lock_guard<std::mutex> lock(mutex_);
            matched_ = info.current_count;
        }
        std::cout << "Test Publisher matched." << std::endl;
        cv_.notify_one();
    }
    else if (info.current_count_change == -1)
    {
        {
            std::lock_guard<std::mutex> lock(mutex_);
            matched_ = info.current_count;
        }
        std::cout << "Test Publisher unmatched." << std::endl;
    }
    else
    {
        std::cout << info.current_count_change
                  << " is not a valid value for PublicationMatchedStatus current count change" << std::endl;
    }
}

void TestPublisherApp::run()
{
    std::cout << "Entering run loop..." << std::endl;
    while (!is_stopped())
    {
        std::cout << "Attempting to publish..." << std::endl;
        if (publish())
        {
            std::cout << "Publication successful. Waiting..." << std::endl;
            std::this_thread::sleep_for(std::chrono::milliseconds(1000));
        }
        else
        {
            std::cout << "Publication failed. Retrying..." << std::endl;
            std::this_thread::sleep_for(std::chrono::milliseconds(1000));
        }
    }
    std::cout << "Exiting run loop..." << std::endl;
}

void TestPublisherApp::processKeyData(const KeyDataModule &data)
{
    // Example processing or sending function
    std::cout << "Processing KeyDataModule: ";
    data.display();
}

bool TestPublisherApp::publish()
{
    if (!writer_)
    {
        std::cerr << "Error: DataWriter is null!" << std::endl;
        return false;
    }

    // Create and send sample regardless of subscriber presence
    Test sample_;
    KeyDataModule data(10, 20, 30);
    std::ostringstream msg;
    msg << "k1:" << data.k1 << ",k2:" << data.k2 << ",k3:" << data.k3;
    sample_.msg(msg.str());

    std::cout << "Publishing sample: " << msg.str() << std::endl;

    ReturnCode_t ret;
    ret = (RETCODE_OK == writer_->write(&sample_));
    if (ret)
    {
        samples_sent_++;
        std::cout << "Sample sent successfully (Total: " << samples_sent_ << ")" << std::endl;
        return true;
    }
    else
    {
        std::cerr << "Failed to write sample: " << ret << std::endl;
        return false;
    }
}

bool TestPublisherApp::is_stopped()
{
    return stop_.load();
}

void TestPublisherApp::stop()
{
    stop_.store(true);
    cv_.notify_one();
}