// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TestPublisherApp.cxx
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#include "TestPublisherApp.hpp"

#include <condition_variable>
#include <csignal>
#include <stdexcept>
#include <thread>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/log/StdoutConsumer.hpp>
#include <fastdds/dds/publisher/DataWriter.hpp>

#include <fastdds/dds/subscriber/DataReader.hpp>
#include <fastdds/dds/publisher/Publisher.hpp>
#include <fastdds/dds/publisher/qos/DataWriterQos.hpp>
#include <fastdds/dds/publisher/qos/PublisherQos.hpp>
#include <fastdds/rtps/common/Locator.hpp>
#include <fastdds/rtps/transport/UDPv4TransportDescriptor.hpp>
#include "TestPubSubTypes.hpp"

using namespace eprosima::fastdds::dds;

TestPublisherApp::TestPublisherApp(
    const int &domain_id)
    : factory_(nullptr), participant_(nullptr), publisher_(nullptr), topic_(nullptr), writer_(nullptr), type_(new TestPubSubType()), matched_(0), samples_sent_(0), stop_(false), listener_(this)
{
    std::string local_ip = "192.168.1.100";
    std::cout << "[CONFIG] Using Ethernet IP: " << local_ip << std::endl;

    // Create participant with specific QoS
    DomainParticipantQos pqos;
    pqos.name("Test_pub_participant");
    std::cout << "[CONFIG] Participant name set to: " << pqos.name() << std::endl;

    // 1. Configure unicast locator
    
    eprosima::fastdds::rtps::Locator_t unicast_locator;
    eprosima::fastdds::rtps::IPLocator::setIPv4(unicast_locator, local_ip);
    unicast_locator.port = 7400;

    // 2. Configure builtin locators
    pqos.wire_protocol().builtin.metatrafficUnicastLocatorList.push_back(unicast_locator);
    pqos.wire_protocol().builtin.initialPeersList.push_back(unicast_locator);

    std::cout << "[TRANSPORT] Creating UDPv4 transport descriptor..." << std::endl;
    auto udp_transport = std::make_shared<eprosima::fastdds::rtps::UDPv4TransportDescriptor>();
    // udp_transport->sendBufferSize = 4096;
    // udp_transport->receiveBufferSize = 4096;
    // udp_transport->maxMessageSize = 2048;
    // udp_transport->non_blocking_send = true;

    // eprosima::fastdds::rtps::ThreadSettings thread_settings;

    // // Configure reception threads
    // thread_settings.scheduling_policy = -1;                         // System default
    // thread_settings.priority = std::numeric_limits<int32_t>::min(); // System default
    // thread_settings.affinity = 0;                                   // No affinity
    // thread_settings.stack_size = -1;                                // System default

    // // Apply to transport
    // udp_transport->default_reception_threads(thread_settings);

    // // For port-specific configuration (if needed)
    // eprosima::fastdds::rtps::ThreadSettings port_thread_settings;
    // port_thread_settings.scheduling_policy = -1;
    // port_thread_settings.priority = std::numeric_limits<int32_t>::min();
    // port_thread_settings.affinity = 0;
    // port_thread_settings.stack_size = -1;

    // udp_transport->set_thread_config_for_port(12345, port_thread_settings);
    // Link the Transport Layer to the Participant.
    pqos.transport().user_transports.push_back(udp_transport);

    // Avoid using the builtin transports
    pqos.transport().use_builtin_transports = false;
    try
    {
        factory_ = DomainParticipantFactory::get_shared_instance();

        // Important: Use the same factory method consistently
        participant_ = factory_->create_participant(domain_id, pqos);

        if (participant_ == nullptr)
        {
            throw std::runtime_error("Participant creation returned null");
        }

        // 5. Register type
        if (!type_.register_type(participant_))
        {
            throw std::runtime_error("Type registration failed");
        }

        std::cout << "Participant created successfully!" << std::endl;

        // 6. Create publisher
        publisher_ = participant_->create_publisher(PUBLISHER_QOS_DEFAULT);
        if (!publisher_)
        {
            throw std::runtime_error("Publisher creation failed");
        }

        // 7. Create topic
        TopicQos topic_qos = TOPIC_QOS_DEFAULT;
        topic_ = participant_->create_topic("TestTopic",
                                            type_.get_type_name(),
                                            topic_qos);
        if (!topic_)
        {
            throw std::runtime_error("Topic creation failed");
        }

        // 8. Create writer
        DataWriterQos writer_qos = DATAWRITER_QOS_DEFAULT;
        writer_ = publisher_->create_datawriter(topic_, writer_qos, this);
        if (!writer_)
        {
            throw std::runtime_error("DataWriter creation failed");
        }
    }
    catch (const std::exception &e)
    {
        std::cerr << "ERROR: " << e.what() << std::endl;
        // Add cleanup code here
        throw;
    }
}

TestPublisherApp::~TestPublisherApp()
{
    if (nullptr != participant_)
    {
        // Delete DDS entities contained within the DomainParticipant
        participant_->delete_contained_entities();

        // Delete DomainParticipant
        factory_->delete_participant(participant_);
    }
}

void TestPublisherApp::on_publication_matched(
    DataWriter * /*writer*/,
    const PublicationMatchedStatus &info)
{
    if (info.current_count_change == 1)
    {
        {
            std::lock_guard<std::mutex> lock(mutex_);
            matched_ = info.current_count;
        }
        std::cout << "Test Publisher matched." << std::endl;
        cv_.notify_one();
    }
    else if (info.current_count_change == -1)
    {
        {
            std::lock_guard<std::mutex> lock(mutex_);
            matched_ = info.current_count;
        }
        std::cout << "Test Publisher unmatched." << std::endl;
    }
    else
    {
        std::cout << info.current_count_change
                  << " is not a valid value for PublicationMatchedStatus current count change" << std::endl;
    }
}

void TestPublisherApp::run()
{
    std::cout << "Entering run loop..." << std::endl;
    while (!is_stopped())
    {
        std::cout << "Attempting to publish..." << std::endl;
        if (publish())
        {
            std::cout << "Publication successful. Waiting..." << std::endl;
            std::this_thread::sleep_for(std::chrono::milliseconds(1000));
        }
        else
        {
            std::cout << "Publication failed. Retrying..." << std::endl;
            std::this_thread::sleep_for(std::chrono::milliseconds(1000));
        }
    }
    std::cout << "Exiting run loop..." << std::endl;
}

void TestPublisherApp::processKeyData(const KeyDataModule &data)
{
    // Example processing or sending function
    std::cout << "Processing KeyDataModule: ";
    data.display();
}

bool TestPublisherApp::publish()
{
    if (!writer_)
    {
        std::cerr << "Error: DataWriter is null!" << std::endl;
        return false;
    }

    // Create and send sample regardless of subscriber presence
    Test sample_;
    KeyDataModule data(10, 20, 30);
    std::ostringstream msg;
    msg << "k1:" << data.k1 << ",k2:" << data.k2 << ",k3:" << data.k3;
    sample_.msg(msg.str());

    std::cout << "Publishing sample: " << msg.str() << std::endl;

    ReturnCode_t ret;
    ret = (RETCODE_OK == writer_->write(&sample_));
    if (ret)
    {
        samples_sent_++;
        std::cout << "Sample sent successfully (Total: " << samples_sent_ << ")" << std::endl;
        return true;
    }
    else
    {
        std::cerr << "Failed to write sample: " << ret << std::endl;
        return false;
    }
}

bool TestPublisherApp::is_stopped()
{
    return stop_.load();
}

void TestPublisherApp::stop()
{
    stop_.store(true);
    cv_.notify_one();
}
